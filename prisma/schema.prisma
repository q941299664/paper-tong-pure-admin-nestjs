generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique() @db.VarChar(50)
  password    String     @db.VarChar(50)
  nickName    String?    @db.VarChar(50)
  email       String     @db.VarChar(50)
  headPic     String?    @db.VarChar(100)
  phoneNumber String?    @db.VarChar(20)
  isFrozen    Boolean    @default(false) @db.TinyInt
  isAdmin     Boolean    @default(false) @db.TinyInt
  createTime  DateTime   @default(now()) @db.DateTime(6)
  updateTime  DateTime   @default(now()) @db.DateTime(6)
  roles       UserRole[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(20)
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  code        String           @db.VarChar(20)
  description String           @db.VarChar(100)
  roles       RolePermission[]
}

model RolePermission {
  id Int @id @default(autoincrement())

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserRole {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId])
  @@index([userId])
}
